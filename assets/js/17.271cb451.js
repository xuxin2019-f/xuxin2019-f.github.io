(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{498:function(t,e,s){"use strict";s.r(e);var a=s(59),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"html-相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html-相关"}},[t._v("#")]),t._v(" HTML 相关")]),t._v(" "),s("h2",{attrs:{id:"_1-如何理解语义化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何理解语义化"}},[t._v("#")]),t._v(" 1.如何理解语义化")]),t._v(" "),s("p",[t._v("html 语义化标签：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("h5新增的语义化标签：\n<header> <main> <article> <section> <footer> <nav> <aside>\n本来就有的：\n<a> <p> <h1> <span> <figure>等等\n")])])]),s("p",[t._v("语义化从代码层次表达程序员的想法，让页面的内容结构化，增强代码的可读性,"),s("strong",[t._v("便于对浏览器、搜索引擎解析")]),t._v(",搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重,利于 SEO（搜索引擎优化）")]),t._v(" "),s("h2",{attrs:{id:"_2-h5-新增哪些标签，移除了哪些标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-h5-新增哪些标签，移除了哪些标签"}},[t._v("#")]),t._v(" 2.H5 新增哪些标签，移除了哪些标签")]),t._v(" "),s("p",[t._v("canvas，vedio，audio，语义化标签等，新技术：web worker ，websocket，geolocation，web Storage，")]),t._v(" "),s("p",[t._v("移除了纯表现元素：basefont big center font s 等 具体见面试页")]),t._v(" "),s("h2",{attrs:{id:"_3-web-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-web-worker"}},[t._v("#")]),t._v(" 3.web worker")]),t._v(" "),s("p",[t._v("为了解决 js 单线程问题而引起的阻塞浏览器响应，影响用户体验的问题，ajax 出现了，但是 ajax 并没有改变 js 单线程执行的本质，意味着我们还是不能把浪费时间的复杂运算放在页面上执行，而 web worker 的出现弥补了这个缺点。")]),t._v(" "),s("p",[s("strong",[t._v("实现 js 在主线程执行，new 出来的 web worker 对象为子线程，只有主线程中的代码会导致阻塞，子线程则不会。")])]),t._v(" "),s("p",[t._v("Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。")]),t._v(" "),s("p",[t._v("基本用法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var w = new Worker('同源js文件')\n向主线程发送消息：\nworker.postMessage('xxxx')\n主线程监听函数\nworker.onmessage = function(event){\n  向主线程发送的消息通过event.data获取\n}\n主线程关闭子线程：\nworker.terminate()\n")])])]),s("p",[t._v("例子：")]),t._v(" "),s("p",[t._v("见 HX 里的 web worker")]),t._v(" "),s("p",[s("strong",[t._v("应用")]),t._v("：https://blog.csdn.net/lqlqlq007/article/details/79824122")]),t._v(" "),s("p",[t._v("用来进行庞大的计算")]),t._v(" "),s("p",[t._v("可以在 worker 中通过 importScripts(url)加载另外的脚本文件")]),t._v(" "),s("p",[s("strong",[t._v("可以使用 setTimeout(), clearTimeout(), setInterval(), and clearInterval()")])]),t._v(" "),s("p",[t._v("可以使用 XMLHttpRequest 来发送请求")]),t._v(" "),s("p",[t._v("可以访问 navigator 的部分属性")]),t._v(" "),s("p",[s("strong",[t._v("缺点")]),t._v("：web worker 存在浏览器的兼容问题，并且对浏览器并不会造成质的改变**（这点不像 websocket，因为一旦引入 websocket，可以代替所有的轮询，达到性能优化的目的**）；同源限制（不支持跨域），DOM 限制（不能访问 DOM:无法使用 document、window、parent 这些对象。但是，Worker 线程可以使用 navigator 对象和 location 对象。);不支持 alert 和 confirm，但是可以 ajax")]),t._v(" "),s("h2",{attrs:{id:"_4-websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-websocket"}},[t._v("#")]),t._v(" 4.websocket")]),t._v(" "),s("p",[t._v("http://www.ruanyifeng.com/blog/2017/05/websocket.html")]),t._v(" "),s("p",[t._v("https://juejin.im/post/5a1bdf676fb9a045055dd99d")]),t._v(" "),s("p",[t._v("http://blog.poetries.top/FE-Interview-Questions/base/#_82-websocket")]),t._v(" "),s("p",[t._v("引入原因：是因为 http 单向请求的缺点，即只能客户端向服务端主动传输数据，而无法实现服务端主动向客户端推送数据，如果服务端数据存在连续变化，则必须要用轮询的方法（每隔一段时间就发送一次询问），这样效率低、浪费资源，为了解决这个问题，引入"),s("strong",[t._v("webSocket，实现双向数据的传输、实时通信")])]),t._v(" "),s("h4",{attrs:{id:"实现实时通信的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现实时通信的方法"}},[t._v("#")]),t._v(" 实现实时通信的方法")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("ajax 短轮询")]),t._v("：每隔一段时间就一次 ajax 请求。项目中我们经常需要实现轮询-每隔几秒请求一次接口刷新数据")]),t._v(" "),s("p",[t._v("一般都会使用 setInterval，但要注意单纯使用它会导致页面卡死，解决方法：")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//setInterval不会清除定时器队列，每重复执行1次都会导致定时器叠加，最终卡死你的网页。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//但是setTimeout是自带清除定时器的")]),t._v("\n")])])]),s("p",[t._v("**短轮询缺点：**这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。尤其是在客户端，距离来说，如果有数量级想对比较大的人同时位于基于短轮询的应用中，那么每一个用户的客户端都会疯狂的向服务器端发送 http 请求，而且不会间断。人数越多，服务器端压力越大，这是很不合理的。")]),t._v(" "),s("p",[t._v("因此短轮询不适用于那些同时在线用户数量比较大，并且很注重性能的 Web 应用。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("comet 长轮询")]),t._v("，客户端向服务端发送请求，除非达到设定的过期时间，不然会一直等到服务端数据更新才会返回数据")])]),t._v(" "),s("p",[t._v("长轮询和短轮询比起来，明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("SSE")]),t._v("：SSE 是 HTML5 新增的功能，全称为 Server-SentEvents。它可以允许服务推送数据到客户端。SSE 在本质上就与之前的长轮询、短轮询不同，虽然都是基于 http 协议的，但是轮询需要客户端先发送请求。")]),t._v(" "),s("li",[s("strong",[t._v("websocket")]),t._v("（比 sse 性能好一点）")])]),t._v(" "),s("p",[t._v("websocket 客户端示例：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var ws = new WebSocket("wss://echo.websocket.org");\n\nws.onopen = function(evt) {\n  console.log("Connection open ...");\n  ws.send("Hello WebSockets!");\n};\n\nws.onmessage = function(evt) {\n  console.log( "Received Message: " + evt.data);\n  ws.close();\n};\n\nws.onclose = function(evt) {\n  console.log("Connection closed.");\n};\n')])])]),s("p",[t._v("服务端的实现：")]),t._v(" "),s("p",[t._v("常用的 Node 实现有以下三种。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/uWebSockets/uWebSockets",target:"_blank",rel:"noopener noreferrer"}},[t._v("µWebSockets"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://socket.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Socket.IO"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/theturtle32/WebSocket-Node",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSocket-Node"),s("OutboundLink")],1)])]),t._v(" "),s("h4",{attrs:{id:"框架中的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#框架中的使用"}},[t._v("#")]),t._v(" 框架中的使用")]),t._v(" "),s("p",[t._v("具体例子可以看收藏夹")]),t._v(" "),s("p",[t._v("在 vue 和 nuxt 框架中，前端最常用的包是"),s("strong",[t._v("sockjs-client（sockjs 的客户端分支）和 stomjs")])]),t._v(" "),s("p",[t._v("为什么不用原生的 websocket 呢？因为有的浏览器并不兼容，此时用 sockjs 会自动降级为轮询。")]),t._v(" "),s("p",[t._v("关于使用的优化：")]),t._v(" "),s("ul",[s("li",[t._v("将实现长连接获取数据的 socket 功能抽离成一个额外的 js 方法，需要的地方再引入")]),t._v(" "),s("li",[t._v("用代理统一转发 ws 请求：比如")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("devServer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  proxy"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以api为开头的路由请求前都添加target的值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       target"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://xxxxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       ws"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否配置websocket代理")]),t._v("\n       secure"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是https接口要配置")]),t._v("\n       changeOrigin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否跨域")]),t._v("\n       pathRewrite"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^/api'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//即最后真实的后台请求地址是以''代替api的")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment"),t._v(" "),s("comment")],1)}),[],!1,null,null,null);e.default=n.exports}}]);